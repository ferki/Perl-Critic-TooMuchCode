## name perl version
## failures 0
## cut

use v5.18;
print 42;

## name File::Spec
## failures 1
## cut

use File::Spec;
print 42;


## name File::Which
## failures 0
## cut

use File::Which;
my $prog = which('ls');

## name File::Which
## failures 1
## cut

use File::Which;
my $prog = "/bin/ls";

## name Try::Tiny
## failures 1
## cut

use Try::Tiny;
print 42;

## name Try::Tiny + File::Spec
## failures 2
## cut

use Try::Tiny;
use File::Spec;
print 42;

## name -Try::Tiny +File::Spec
## failures 1
## cut

use Try::Tiny;
use File::Spec;
try { print 42; };

## name -Try::Tiny -File::Spec
## failures 0
## cut

use Try::Tiny;
use File::Spec;
try { print File::Spec->catfile("answer" => 42); };

## name +Try::Tiny -File::Spec
## failures 1
## cut

use Try::Tiny;
use File::Spec;
print File::Spec->catfile("answer" => 42);

## name +Try::Lite
## failures 1
## cut

use Try::Lite;
print localtime();

## name Generic: use Foobar -- but we do not know how to verify if it is used.
## failures 0
## cut

use Foobar;
print 42;

## name Generic: use Something objectively.
## failures 0
## cut

use Foobar;
use Something;
Something->process( localtime() );

## name Generic: use Something functionally.
## failures 0
## cut

use Foobar;
use Something;
Something::process( localtime() );

## name Hijk (unused)
## failures 1
## cut

use Hijk;
print something();

## name Hijk::request
## failures 0
## cut

use Hijk;
Hijk::request($req);

## name Moo
## failures 0
## cut

use Moo;
has zzz => ( is => "rw" );

## name self;
## failures 0
## cut

use self;
sub fnord {
    print $self->darf;
}

## name Generic: with imported symbols.
## failures 0
## cut

use Foo qw(bar);
my $a = 42;
bar($a);

## name Pragmatism
## failures 0
## cut

use Test::NoWarnings;
print 42;
